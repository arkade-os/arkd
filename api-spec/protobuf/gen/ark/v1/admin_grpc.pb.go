// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ark/v1/admin.proto

package arkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_GetScheduledSweep_FullMethodName            = "/ark.v1.AdminService/GetScheduledSweep"
	AdminService_GetRoundDetails_FullMethodName              = "/ark.v1.AdminService/GetRoundDetails"
	AdminService_GetRounds_FullMethodName                    = "/ark.v1.AdminService/GetRounds"
	AdminService_CreateNote_FullMethodName                   = "/ark.v1.AdminService/CreateNote"
	AdminService_GetScheduledSessionConfig_FullMethodName    = "/ark.v1.AdminService/GetScheduledSessionConfig"
	AdminService_UpdateScheduledSessionConfig_FullMethodName = "/ark.v1.AdminService/UpdateScheduledSessionConfig"
	AdminService_ClearScheduledSessionConfig_FullMethodName  = "/ark.v1.AdminService/ClearScheduledSessionConfig"
	AdminService_ListIntents_FullMethodName                  = "/ark.v1.AdminService/ListIntents"
	AdminService_DeleteIntents_FullMethodName                = "/ark.v1.AdminService/DeleteIntents"
	AdminService_GetConvictions_FullMethodName               = "/ark.v1.AdminService/GetConvictions"
	AdminService_GetConvictionsInRange_FullMethodName        = "/ark.v1.AdminService/GetConvictionsInRange"
	AdminService_GetConvictionsByRound_FullMethodName        = "/ark.v1.AdminService/GetConvictionsByRound"
	AdminService_GetActiveScriptConvictions_FullMethodName   = "/ark.v1.AdminService/GetActiveScriptConvictions"
	AdminService_PardonConviction_FullMethodName             = "/ark.v1.AdminService/PardonConviction"
	AdminService_BanScript_FullMethodName                    = "/ark.v1.AdminService/BanScript"
	AdminService_RevokeAuth_FullMethodName                   = "/ark.v1.AdminService/RevokeAuth"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetScheduledSweep(ctx context.Context, in *GetScheduledSweepRequest, opts ...grpc.CallOption) (*GetScheduledSweepResponse, error)
	GetRoundDetails(ctx context.Context, in *GetRoundDetailsRequest, opts ...grpc.CallOption) (*GetRoundDetailsResponse, error)
	GetRounds(ctx context.Context, in *GetRoundsRequest, opts ...grpc.CallOption) (*GetRoundsResponse, error)
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error)
	GetScheduledSessionConfig(ctx context.Context, in *GetScheduledSessionConfigRequest, opts ...grpc.CallOption) (*GetScheduledSessionConfigResponse, error)
	UpdateScheduledSessionConfig(ctx context.Context, in *UpdateScheduledSessionConfigRequest, opts ...grpc.CallOption) (*UpdateScheduledSessionConfigResponse, error)
	ClearScheduledSessionConfig(ctx context.Context, in *ClearScheduledSessionConfigRequest, opts ...grpc.CallOption) (*ClearScheduledSessionConfigResponse, error)
	ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error)
	DeleteIntents(ctx context.Context, in *DeleteIntentsRequest, opts ...grpc.CallOption) (*DeleteIntentsResponse, error)
	GetConvictions(ctx context.Context, in *GetConvictionsRequest, opts ...grpc.CallOption) (*GetConvictionsResponse, error)
	GetConvictionsInRange(ctx context.Context, in *GetConvictionsInRangeRequest, opts ...grpc.CallOption) (*GetConvictionsInRangeResponse, error)
	GetConvictionsByRound(ctx context.Context, in *GetConvictionsByRoundRequest, opts ...grpc.CallOption) (*GetConvictionsByRoundResponse, error)
	GetActiveScriptConvictions(ctx context.Context, in *GetActiveScriptConvictionsRequest, opts ...grpc.CallOption) (*GetActiveScriptConvictionsResponse, error)
	PardonConviction(ctx context.Context, in *PardonConvictionRequest, opts ...grpc.CallOption) (*PardonConvictionResponse, error)
	BanScript(ctx context.Context, in *BanScriptRequest, opts ...grpc.CallOption) (*BanScriptResponse, error)
	RevokeAuth(ctx context.Context, in *RevokeAuthRequest, opts ...grpc.CallOption) (*RevokeAuthResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetScheduledSweep(ctx context.Context, in *GetScheduledSweepRequest, opts ...grpc.CallOption) (*GetScheduledSweepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScheduledSweepResponse)
	err := c.cc.Invoke(ctx, AdminService_GetScheduledSweep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRoundDetails(ctx context.Context, in *GetRoundDetailsRequest, opts ...grpc.CallOption) (*GetRoundDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoundDetailsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetRoundDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRounds(ctx context.Context, in *GetRoundsRequest, opts ...grpc.CallOption) (*GetRoundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoundsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetRounds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNoteResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetScheduledSessionConfig(ctx context.Context, in *GetScheduledSessionConfigRequest, opts ...grpc.CallOption) (*GetScheduledSessionConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScheduledSessionConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_GetScheduledSessionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateScheduledSessionConfig(ctx context.Context, in *UpdateScheduledSessionConfigRequest, opts ...grpc.CallOption) (*UpdateScheduledSessionConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScheduledSessionConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateScheduledSessionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ClearScheduledSessionConfig(ctx context.Context, in *ClearScheduledSessionConfigRequest, opts ...grpc.CallOption) (*ClearScheduledSessionConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearScheduledSessionConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_ClearScheduledSessionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntentsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListIntents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteIntents(ctx context.Context, in *DeleteIntentsRequest, opts ...grpc.CallOption) (*DeleteIntentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIntentsResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteIntents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConvictions(ctx context.Context, in *GetConvictionsRequest, opts ...grpc.CallOption) (*GetConvictionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConvictionsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConvictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConvictionsInRange(ctx context.Context, in *GetConvictionsInRangeRequest, opts ...grpc.CallOption) (*GetConvictionsInRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConvictionsInRangeResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConvictionsInRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConvictionsByRound(ctx context.Context, in *GetConvictionsByRoundRequest, opts ...grpc.CallOption) (*GetConvictionsByRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConvictionsByRoundResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConvictionsByRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetActiveScriptConvictions(ctx context.Context, in *GetActiveScriptConvictionsRequest, opts ...grpc.CallOption) (*GetActiveScriptConvictionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveScriptConvictionsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetActiveScriptConvictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PardonConviction(ctx context.Context, in *PardonConvictionRequest, opts ...grpc.CallOption) (*PardonConvictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PardonConvictionResponse)
	err := c.cc.Invoke(ctx, AdminService_PardonConviction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BanScript(ctx context.Context, in *BanScriptRequest, opts ...grpc.CallOption) (*BanScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanScriptResponse)
	err := c.cc.Invoke(ctx, AdminService_BanScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RevokeAuth(ctx context.Context, in *RevokeAuthRequest, opts ...grpc.CallOption) (*RevokeAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAuthResponse)
	err := c.cc.Invoke(ctx, AdminService_RevokeAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	GetScheduledSweep(context.Context, *GetScheduledSweepRequest) (*GetScheduledSweepResponse, error)
	GetRoundDetails(context.Context, *GetRoundDetailsRequest) (*GetRoundDetailsResponse, error)
	GetRounds(context.Context, *GetRoundsRequest) (*GetRoundsResponse, error)
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error)
	GetScheduledSessionConfig(context.Context, *GetScheduledSessionConfigRequest) (*GetScheduledSessionConfigResponse, error)
	UpdateScheduledSessionConfig(context.Context, *UpdateScheduledSessionConfigRequest) (*UpdateScheduledSessionConfigResponse, error)
	ClearScheduledSessionConfig(context.Context, *ClearScheduledSessionConfigRequest) (*ClearScheduledSessionConfigResponse, error)
	ListIntents(context.Context, *ListIntentsRequest) (*ListIntentsResponse, error)
	DeleteIntents(context.Context, *DeleteIntentsRequest) (*DeleteIntentsResponse, error)
	GetConvictions(context.Context, *GetConvictionsRequest) (*GetConvictionsResponse, error)
	GetConvictionsInRange(context.Context, *GetConvictionsInRangeRequest) (*GetConvictionsInRangeResponse, error)
	GetConvictionsByRound(context.Context, *GetConvictionsByRoundRequest) (*GetConvictionsByRoundResponse, error)
	GetActiveScriptConvictions(context.Context, *GetActiveScriptConvictionsRequest) (*GetActiveScriptConvictionsResponse, error)
	PardonConviction(context.Context, *PardonConvictionRequest) (*PardonConvictionResponse, error)
	BanScript(context.Context, *BanScriptRequest) (*BanScriptResponse, error)
	RevokeAuth(context.Context, *RevokeAuthRequest) (*RevokeAuthResponse, error)
}

// UnimplementedAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) GetScheduledSweep(context.Context, *GetScheduledSweepRequest) (*GetScheduledSweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledSweep not implemented")
}
func (UnimplementedAdminServiceServer) GetRoundDetails(context.Context, *GetRoundDetailsRequest) (*GetRoundDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundDetails not implemented")
}
func (UnimplementedAdminServiceServer) GetRounds(context.Context, *GetRoundsRequest) (*GetRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRounds not implemented")
}
func (UnimplementedAdminServiceServer) CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedAdminServiceServer) GetScheduledSessionConfig(context.Context, *GetScheduledSessionConfigRequest) (*GetScheduledSessionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledSessionConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateScheduledSessionConfig(context.Context, *UpdateScheduledSessionConfigRequest) (*UpdateScheduledSessionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledSessionConfig not implemented")
}
func (UnimplementedAdminServiceServer) ClearScheduledSessionConfig(context.Context, *ClearScheduledSessionConfigRequest) (*ClearScheduledSessionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearScheduledSessionConfig not implemented")
}
func (UnimplementedAdminServiceServer) ListIntents(context.Context, *ListIntentsRequest) (*ListIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntents not implemented")
}
func (UnimplementedAdminServiceServer) DeleteIntents(context.Context, *DeleteIntentsRequest) (*DeleteIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntents not implemented")
}
func (UnimplementedAdminServiceServer) GetConvictions(context.Context, *GetConvictionsRequest) (*GetConvictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvictions not implemented")
}
func (UnimplementedAdminServiceServer) GetConvictionsInRange(context.Context, *GetConvictionsInRangeRequest) (*GetConvictionsInRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvictionsInRange not implemented")
}
func (UnimplementedAdminServiceServer) GetConvictionsByRound(context.Context, *GetConvictionsByRoundRequest) (*GetConvictionsByRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvictionsByRound not implemented")
}
func (UnimplementedAdminServiceServer) GetActiveScriptConvictions(context.Context, *GetActiveScriptConvictionsRequest) (*GetActiveScriptConvictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveScriptConvictions not implemented")
}
func (UnimplementedAdminServiceServer) PardonConviction(context.Context, *PardonConvictionRequest) (*PardonConvictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PardonConviction not implemented")
}
func (UnimplementedAdminServiceServer) BanScript(context.Context, *BanScriptRequest) (*BanScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanScript not implemented")
}
func (UnimplementedAdminServiceServer) RevokeAuth(context.Context, *RevokeAuthRequest) (*RevokeAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuth not implemented")
}
func (UnimplementedAdminServiceServer) testEmbeddedByValue() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetScheduledSweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledSweepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetScheduledSweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetScheduledSweep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetScheduledSweep(ctx, req.(*GetScheduledSweepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRoundDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRoundDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRoundDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRoundDetails(ctx, req.(*GetRoundDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRounds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRounds(ctx, req.(*GetRoundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetScheduledSessionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledSessionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetScheduledSessionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetScheduledSessionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetScheduledSessionConfig(ctx, req.(*GetScheduledSessionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateScheduledSessionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledSessionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateScheduledSessionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateScheduledSessionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateScheduledSessionConfig(ctx, req.(*UpdateScheduledSessionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ClearScheduledSessionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearScheduledSessionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ClearScheduledSessionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ClearScheduledSessionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ClearScheduledSessionConfig(ctx, req.(*ClearScheduledSessionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListIntents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIntents(ctx, req.(*ListIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteIntents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteIntents(ctx, req.(*DeleteIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConvictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConvictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConvictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConvictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConvictions(ctx, req.(*GetConvictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConvictionsInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConvictionsInRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConvictionsInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConvictionsInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConvictionsInRange(ctx, req.(*GetConvictionsInRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConvictionsByRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConvictionsByRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConvictionsByRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConvictionsByRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConvictionsByRound(ctx, req.(*GetConvictionsByRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetActiveScriptConvictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveScriptConvictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetActiveScriptConvictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetActiveScriptConvictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetActiveScriptConvictions(ctx, req.(*GetActiveScriptConvictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PardonConviction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PardonConvictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PardonConviction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_PardonConviction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PardonConviction(ctx, req.(*PardonConvictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BanScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BanScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_BanScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BanScript(ctx, req.(*BanScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RevokeAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RevokeAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RevokeAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RevokeAuth(ctx, req.(*RevokeAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ark.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScheduledSweep",
			Handler:    _AdminService_GetScheduledSweep_Handler,
		},
		{
			MethodName: "GetRoundDetails",
			Handler:    _AdminService_GetRoundDetails_Handler,
		},
		{
			MethodName: "GetRounds",
			Handler:    _AdminService_GetRounds_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _AdminService_CreateNote_Handler,
		},
		{
			MethodName: "GetScheduledSessionConfig",
			Handler:    _AdminService_GetScheduledSessionConfig_Handler,
		},
		{
			MethodName: "UpdateScheduledSessionConfig",
			Handler:    _AdminService_UpdateScheduledSessionConfig_Handler,
		},
		{
			MethodName: "ClearScheduledSessionConfig",
			Handler:    _AdminService_ClearScheduledSessionConfig_Handler,
		},
		{
			MethodName: "ListIntents",
			Handler:    _AdminService_ListIntents_Handler,
		},
		{
			MethodName: "DeleteIntents",
			Handler:    _AdminService_DeleteIntents_Handler,
		},
		{
			MethodName: "GetConvictions",
			Handler:    _AdminService_GetConvictions_Handler,
		},
		{
			MethodName: "GetConvictionsInRange",
			Handler:    _AdminService_GetConvictionsInRange_Handler,
		},
		{
			MethodName: "GetConvictionsByRound",
			Handler:    _AdminService_GetConvictionsByRound_Handler,
		},
		{
			MethodName: "GetActiveScriptConvictions",
			Handler:    _AdminService_GetActiveScriptConvictions_Handler,
		},
		{
			MethodName: "PardonConviction",
			Handler:    _AdminService_PardonConviction_Handler,
		},
		{
			MethodName: "BanScript",
			Handler:    _AdminService_BanScript_Handler,
		},
		{
			MethodName: "RevokeAuth",
			Handler:    _AdminService_RevokeAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ark/v1/admin.proto",
}
