// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package signerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignerServiceClient is the client API for SignerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignerServiceClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	SignTransactionTapscript(ctx context.Context, in *SignTransactionTapscriptRequest, opts ...grpc.CallOption) (*SignTransactionTapscriptResponse, error)
}

type signerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignerServiceClient(cc grpc.ClientConnInterface) SignerServiceClient {
	return &signerServiceClient{cc}
}

func (c *signerServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/signer.v1.SignerService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerServiceClient) GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error) {
	out := new(GetPubkeyResponse)
	err := c.cc.Invoke(ctx, "/signer.v1.SignerService/GetPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerServiceClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/signer.v1.SignerService/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerServiceClient) SignTransactionTapscript(ctx context.Context, in *SignTransactionTapscriptRequest, opts ...grpc.CallOption) (*SignTransactionTapscriptResponse, error) {
	out := new(SignTransactionTapscriptResponse)
	err := c.cc.Invoke(ctx, "/signer.v1.SignerService/SignTransactionTapscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServiceServer is the server API for SignerService service.
// All implementations should embed UnimplementedSignerServiceServer
// for forward compatibility
type SignerServiceServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	SignTransactionTapscript(context.Context, *SignTransactionTapscriptRequest) (*SignTransactionTapscriptResponse, error)
}

// UnimplementedSignerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSignerServiceServer struct {
}

func (UnimplementedSignerServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSignerServiceServer) GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubkey not implemented")
}
func (UnimplementedSignerServiceServer) SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedSignerServiceServer) SignTransactionTapscript(context.Context, *SignTransactionTapscriptRequest) (*SignTransactionTapscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionTapscript not implemented")
}

// UnsafeSignerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignerServiceServer will
// result in compilation errors.
type UnsafeSignerServiceServer interface {
	mustEmbedUnimplementedSignerServiceServer()
}

func RegisterSignerServiceServer(s grpc.ServiceRegistrar, srv SignerServiceServer) {
	s.RegisterService(&SignerService_ServiceDesc, srv)
}

func _SignerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signer.v1.SignerService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignerService_GetPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).GetPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signer.v1.SignerService/GetPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).GetPubkey(ctx, req.(*GetPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignerService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signer.v1.SignerService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignerService_SignTransactionTapscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionTapscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).SignTransactionTapscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signer.v1.SignerService/SignTransactionTapscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).SignTransactionTapscript(ctx, req.(*SignTransactionTapscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignerService_ServiceDesc is the grpc.ServiceDesc for SignerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signer.v1.SignerService",
	HandlerType: (*SignerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _SignerService_GetStatus_Handler,
		},
		{
			MethodName: "GetPubkey",
			Handler:    _SignerService_GetPubkey_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _SignerService_SignTransaction_Handler,
		},
		{
			MethodName: "SignTransactionTapscript",
			Handler:    _SignerService_SignTransactionTapscript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signer/v1/service.proto",
}
